#!/usr/bin/env node

const fs = require("fs")
const command = require("./cmd")(process.argv.slice(2));
const {generator, loader, optionConfig} = require('../devpacker/devpacker.bundle')

const workespace = addSlash(process.cwd());
const filec = workespace + 'devpacker.config.js';

const config = {
    entry: '',
    outFile: '',
    outDir: '',
    options: optionConfig.config
}

const input_options = [
    ['-h', '--help'],
    ['-cf', '--create-config'],
    ['-m', '--minify'],
    ['-f', '--format'],
    ['-e', '-i', '--entry'],
    ['-o', '--output'],
];

console.time('time');

command.input(input_options, [
    'muestra la lista de comandos',
    'create un archivo de configuracion',
    'salida de codigo minificado',
    'salida en formato umd o cjs',
    'entrada del archivo o carpeta a compilar'
])

command.option(0, command.log)

command.option(1, function () {
    let data = JSON.stringify(config, null, 4);
    fs.writeFileSync(
        filec,
        `module.exports = ${data}`,
        {encoding: 'utf8'});
})

command.option(2, setConfig('minified'))
command.option(3, setConfig('format'))
command.option(4, setConfig('entry'))

command.option(5, (vals) => {
    config[vals[0].endsWith('.js') ? 'outFile' : 'outDir'] = vals[0];
})

command.run(function () {
    generateFile(fs.existsSync(filec) ? require(filec) : config)
});

function setConfig(key) {
    return function (vals) { config[key] = vals[0]; }
}

function generateFile(config) {
    const out = config.outFile || config.outDir;
    
    optionConfig.setConfig(config.options);
    
    if (out.endsWith('.js') && config.entry.endsWith('.js')) {
        const split = out.split('/');split.pop();
        recursiveDirs(split.join('/'));
        generator(loader(config.entry)).then(data => {
            fs.writeFileSync(absPath(out), data, {encoding: 'utf8'});
            console.log(`has been created! -> ${out}`)
            console.timeEnd('time')
        });
    } else if (!out.endsWith('.js') && !config.entry.endsWith('.js')) {
        //
    } else {
        console.error('entry or output not valid')
    }
}

function recursiveDirs(dir) {
    if (!fs.existsSync(absPath(dir))) {
        fs.mkdirSync(absPath(dir), {recursive: true});
    }
}

function absPath(path) {
    return (workespace + (path[0] === '/' ? path.slice(1) : path));
}

function addSlash(path) {
    if (path.slice(path.length - 1) !== '/') {
        path += '/';
    }
    return path;
}